{"ast":null,"code":"var _jsxFileName = \"C:\\\\it-incubator\\\\Hometask 1-13\\\\hws2\\\\src\\\\s2-homeworks\\\\hw03\\\\HW3.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { v1 } from 'uuid';\nimport s2 from '../../s1-main/App.module.css';\nimport GreetingContainer from './GreetingContainer';\n/*\r\n* 1 - описать тип UserType\r\n* 2 - указать нужный тип в useState с users\r\n* 3 - дописать типы и логику функции pureAddUserCallback и проверить её тестами\r\n* 4 - в файле GreetingContainer.tsx дописать типизацию пропсов\r\n* 5 - в файле GreetingContainer.tsx указать нужные типы в useState с name и error\r\n* 6 - в файле GreetingContainer.tsx дописать тип и логику функции setNameCallback\r\n* 7 - в файле GreetingContainer.tsx дописать логику функций pureAddUser, pureOnBlur, pureOnEnter и проверить их тестами\r\n* 8 - в файле GreetingContainer.tsx вычислить количество добавленных и имя последнего (totalUsers, lastUserName)\r\n* 9 - в файле Greeting.tsx дописать типизацию пропсов\r\n* 10 - в файле Greeting.tsx вычислить inputClass в зависимости от наличия ошибки\r\n* 11 - сделать стили в соответствии с дизайном\r\n* */\n// types\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const pureAddUserCallback = (name, setUsers, users) => {\n  // need to fix any\n  const user = {\n    // need to fix\n    _id: v1(),\n    name: name\n  };\n  setUsers([...users, user]);\n};\n\nconst HW3 = () => {\n  _s();\n\n  const [users, setUsers] = useState([]); // need to fix any\n\n  const addUserCallback = name => {\n    // need to fix any\n    pureAddUserCallback(name, setUsers, users);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: 'hw3',\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: s2.hwTitle,\n      children: \"Homework #3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: s2.hw,\n      children: /*#__PURE__*/_jsxDEV(GreetingContainer, {\n        users: users,\n        addUserCallback: addUserCallback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HW3, \"gAXO2JN5F09+lSQAgkU4yvYNIT8=\");\n\n_c = HW3;\nexport default HW3;\n\nvar _c;\n\n$RefreshReg$(_c, \"HW3\");","map":{"version":3,"names":["React","useState","v1","s2","GreetingContainer","pureAddUserCallback","name","setUsers","users","user","_id","HW3","addUserCallback","hwTitle","hw"],"sources":["C:/it-incubator/Hometask 1-13/hws2/src/s2-homeworks/hw03/HW3.tsx"],"sourcesContent":["import React, {useState} from 'react'\r\nimport {v1} from 'uuid'\r\nimport s2 from '../../s1-main/App.module.css'\r\nimport GreetingContainer from './GreetingContainer'\r\n\r\n/*\r\n* 1 - описать тип UserType\r\n* 2 - указать нужный тип в useState с users\r\n* 3 - дописать типы и логику функции pureAddUserCallback и проверить её тестами\r\n* 4 - в файле GreetingContainer.tsx дописать типизацию пропсов\r\n* 5 - в файле GreetingContainer.tsx указать нужные типы в useState с name и error\r\n* 6 - в файле GreetingContainer.tsx дописать тип и логику функции setNameCallback\r\n* 7 - в файле GreetingContainer.tsx дописать логику функций pureAddUser, pureOnBlur, pureOnEnter и проверить их тестами\r\n* 8 - в файле GreetingContainer.tsx вычислить количество добавленных и имя последнего (totalUsers, lastUserName)\r\n* 9 - в файле Greeting.tsx дописать типизацию пропсов\r\n* 10 - в файле Greeting.tsx вычислить inputClass в зависимости от наличия ошибки\r\n* 11 - сделать стили в соответствии с дизайном\r\n* */\r\n\r\n// types\r\nexport type UserType = {\r\n    _id: string // need to fix any\r\n    name: string // need to fix any\r\n}\r\n\r\nexport const pureAddUserCallback = (name: string, setUsers: ()=> Array<UserType>, users: Array<UserType>) => { // need to fix any\r\n    const user = { // need to fix\r\n        _id: v1(),\r\n        name: name\r\n    }\r\n    setUsers([...users, user])\r\n}\r\n\r\nconst HW3 = () => {\r\n    const [users, setUsers] = useState<Array<UserType>>([]) // need to fix any\r\n\r\n    const addUserCallback = (name: string) => { // need to fix any\r\n        pureAddUserCallback(name, setUsers, users)\r\n    }\r\n\r\n    return (\r\n        <div id={'hw3'}>\r\n            <div className={s2.hwTitle}>Homework #3</div>\r\n            {/*для автоматической проверки дз (не менять)*/}\r\n\r\n            <div className={s2.hw}>\r\n                <GreetingContainer\r\n                    users={users}\r\n                    addUserCallback={addUserCallback}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HW3\r\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,EAAR,QAAiB,MAAjB;AACA,OAAOC,EAAP,MAAe,8BAAf;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAMA,OAAO,MAAMC,mBAAmB,GAAG,CAACC,IAAD,EAAeC,QAAf,EAA+CC,KAA/C,KAA0E;EAAE;EAC3G,MAAMC,IAAI,GAAG;IAAE;IACXC,GAAG,EAAER,EAAE,EADE;IAETI,IAAI,EAAEA;EAFG,CAAb;EAIAC,QAAQ,CAAC,CAAC,GAAGC,KAAJ,EAAWC,IAAX,CAAD,CAAR;AACH,CANM;;AAQP,MAAME,GAAG,GAAG,MAAM;EAAA;;EACd,MAAM,CAACH,KAAD,EAAQD,QAAR,IAAoBN,QAAQ,CAAkB,EAAlB,CAAlC,CADc,CAC0C;;EAExD,MAAMW,eAAe,GAAIN,IAAD,IAAkB;IAAE;IACxCD,mBAAmB,CAACC,IAAD,EAAOC,QAAP,EAAiBC,KAAjB,CAAnB;EACH,CAFD;;EAIA,oBACI;IAAK,EAAE,EAAE,KAAT;IAAA,wBACI;MAAK,SAAS,EAAEL,EAAE,CAACU,OAAnB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAII;MAAK,SAAS,EAAEV,EAAE,CAACW,EAAnB;MAAA,uBACI,QAAC,iBAAD;QACI,KAAK,EAAEN,KADX;QAEI,eAAe,EAAEI;MAFrB;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA,QAJJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAaH,CApBD;;GAAMD,G;;KAAAA,G;AAsBN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}